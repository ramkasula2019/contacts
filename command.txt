/* Day 1 */
virtualenv .venv
.\.venv\Scripts\activate
pip install --default-timeout=200 django
pip install --default-timeout=200 requests
pip freeze
pip freeze > requirement.txt
------------------------------------------
--- if need to install all package ---
pip install -r requirement.txt
-----------------------------------------

------------------
starting the projects
---------------------
django-admin startprojegit t contacts
python manage.py runserver
python .\manage.py startapp web


/* Day 2 */
python .\manage.py check
python .\manage.py makemigrations
python .\manage.py makemigrations web (to migrate on web app only)

python .\manage.py sqlmigrate web 0001 (to see sql that is going to be execute for migrate command where
0001 is the sq no of 00001_initial.py in web > migrations )

python .\manage.py migrate

-- Playing around with model through shell
python .\manage.py shell

from web.models import Contacts
binaya = Contacts(first_name = "Binaya", last_name = "Shakya", number= 9841203040,address = "KTM", dob = "12151990")
binaya.first_name
binaya.last_name
Contacts.objects.all() (will not have any query set)
binaya.save()
Contacts.objects.all() (one query set) 
Contacts.objects.values() 
Contacts.objects.count()
Contacts.objects.filter(first_name = "Binaya").values()

for contact in Contacts.objects.all():
    print(contact.first_name)

binaya = Contacts.objects.filter(first_name = "Binaya")
binaya.delete()

---- creating super user --------------
python .\manage.py createsuperuser (This will create super user admin so go to url 127.0.0.1:8000/admin)
we see authorizatoin app only.
Now to register our own app web, we need to register it in web > admin.py as 
/*
from .models import Contacts

admin.site.register(Contacts)
*/
As our model name is Contacts, the admin panel shows Contactss in web app

Inside this Contactss we see list of our contacts

/* Day-3 */
url is list that map the request to the view
null = True means db can hold null value
contactnumber.objects.get(id = 1) to filter by id = 1

sometime we need to delete all file inside misgration folder to detect makemigrations
Refer python manage.py flush

i) Create concept of foreign key
ii) Create templates which should be inside (app>templates>app>index.html)
iii) This template should be load in views for that
a) first import template loader
from django.template import loader
b) Now create template object as template = loader.get_template(with index.html path)
c) Now render this template object by render function as
        return HttpResponse(template.render(context, request)) where context should always be dictionary



/* Day-4 */
i) We can use render from shortcut module instead of HttpResponse as
from django.shortcuts import render
return render(request, "web/index.html", context)
--- where render function takes (request object, template name, contexts) with must return keyword
which is eqvt to HttpResponse

ii) We have http404 for port related error handling
from django. http import http404
OR 
for this also we have shortcut get_object_or_404 as
from django.shortcut import get_object_or_404

contact = get_object_or_404(Contacts, id = contact_id)

iii) Here name can be used as metadata for first argument of path url
path('contact/<int:contact_id>', views.contact_detail, name = "contact")


/* Day-5 */
i) switch to master branch and git pull
ii)  git checkout -b day-5/css_related (checkout)
iii) git push --set-upstream origin day-5/css_related (pushing)
A) Function Based view
    Defined function which has request object as parameter or argument
B) Class Based view 
    Class view 
        View - where we can do (get, post, delete, put)
    generic View:    
        ListView (Models.objects.all())
        DetailView (Models.objects.get(key = value)) 
List view / Detail view takes (model , template_name, cotext_object_name)